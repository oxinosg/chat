* TODO [#A] Chat Client
** TODO [#C] check if browser supports websockets
** TODO [middleware.ts] create interfaces based on contracts and used a validation lib here to verify data [[file:/home/ggz/Dev/chat/apps/client-chat/src/app/store/middleware.ts::// TODO create interfaces based on contracts and used a validation lib here to verify data][src]] [2020-08-14 Fr]
** TODO add a documentation lib and add detailed documentations for everything. project structs, patterns etc
** TODO consider reselectors
** TODO move common to nx shared components lib, and add storybook
** TODO redux-persist
** TODO replace react-quill with draft.js
** DONE [#A] switch to DDD structure
** DONE [#A] switch to use redux toolkit
** DONE [middleware.ts] switch to redux toolkit utils [[file:/home/ggz/Dev/chat/apps/client-chat/src/app/store/middleware.ts::// TODO switch to redux toolkit utils][src]] [2020-10-10 Sa]
* TODO Chat Api
** TODO [chat.gateway.ts] load most common data to redis [[file:/home/ggz/Dev/chat/apps/api-chat/src/app/chat.gateway.ts::// TODO load most common data to redis][src]] [2020-06-27 Sa]
** TODO [chat.gateway.ts] load metadata and latest messages from each room to redis [[file:/home/ggz/Dev/chat/apps/api-chat/src/app/chat.gateway.ts::// TODO load metadata and latest messages from each room to redis][src]] [2020-06-27 Sa]
* TODO Chat Service
** TODO [create-message.handler.ts] create model first and generate tim from model, then send to redis [[file:/home/ggz/Dev/chat/apps/service-chat/src/app/application/commands/handlers/create-message.handler.ts::// TODO create model first and generate tim from model, then send to redis][src]] [2020-06-25 Do]
** TODO [create-message.handler.ts] turn class to object and add id, also remove id from model [[file:/home/ggz/Dev/chat/apps/service-chat/src/app/application/commands/handlers/create-message.handler.ts::// TODO turn class to object and add id, also remove id from model][src]] [2020-06-25 Do]
** TODO [chat.repository.ts] test performance diff between multi and sort for getting all messages [[file:/home/ggz/Dev/chat/apps/service-chat/src/app/infrastucture/repository/chat.repository.ts::// TODO test performance diff between multi and sort for getting all messages][src]] [2020-06-26 Fr]
** TODO add expiration to everything stored in redis
* TODO Chat Service History
* TODO General Improvements
** TODO create nx plugin to run all dependant apps in production build in pm2 and only app in development in dev mode
** TODO readme.md
*** TODO add instructions
*** TODO add TODO section
* ------ unsorted -------
* TODO [saga.ts] add error handlers and data validators based on contracts [[file:/home/ggz/Dev/chat/apps/client-chat/src/app/store/saga.ts::// TODO add error handlers and data validators based on contracts][src]] [2020-08-15 Sa]
* IDEA Set up chat history service to be a rust service which will also encrypt messages before perm storing them, decrypt them to pass them to chat service
* IDEA Set up rust graphql server and apollo graphql server and compare
* IDEA Set up user service in deno
* IDEA Set up clean up crew to delete inactive users and their messages, and another to delete unassociated data
* TODO add a 2nd api with graphql/rust server and create 2nd client that will use component lib and d3 to show user/messages charts statistic. delegate d3 data transformation to wasm
* TODO [ChatMessageList.tsx] :add read status later `message.read` [[file:/home/ggz/Dev/chat/apps/client-chat/src/app/modules/chat/components/MessageList/ChatMessageList.tsx::: // TODO add read status later `message.read`][src]] [2020-10-17 Sa]
